group = 'com.adha'
sourceCompatibility = '17'

ext {
    set('springCloudVersion', '2022.0.0')
    set('tomcat.version', "10.1.4")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "https://gitlab.com/api/v4/projects/46784131/packages/maven"
        name "GitLab"
        credentials(HttpHeaderCredentials) {
            name = "Private-Token"
            value = System.getenv("GITLAB_JAVA_MS_PRIVATE_TOKEN")
        }
        authentication {
            header(HttpHeaderAuthentication)
        }
    }
}

checkstyle {
    toolVersion = '10.0'
    configFile = file('base-gradle/google_checks.xml')
    reportsDir = file("$project.buildDir/reports/checkstyle/")
    checkstyleTest.enabled = false
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
    }
    maxErrors = 0
    maxWarnings = 0
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    executionData(file("${project.buildDir}/jacoco/test.exec"))
    reports {
        xml.required = true
        xml.destination(file("${project.buildDir}/reports/jacoco/xml/unitTest/jacocoUnitTestReport.xml"))
        html.destination file("${project.buildDir}/reports/jacoco/html/unitTest")
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: excludeFilesFromTests)
            }))
        }
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    executionData(file("${project.buildDir}/jacoco/test.exec"))
    classDirectories.from = sourceSets.main.output
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
				minimum = new BigDecimal("0.20")
            }
            afterEvaluate {
                classDirectories.setFrom(files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: excludeFilesFromTests)
                }))
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification

ext {
    [ // Groovy map literal
      libraries = [
              spring_boot_starter_web: 'org.springframework.boot:spring-boot-starter-web',
              spring_boot_dev_tools  : 'org.springframework.boot:spring-boot-devtools',
              jetbrains_annotations  : 'org.jetbrains:annotations:20.1.0',
              lombok                 : 'org.projectlombok:lombok:1.18.24',
              spring_boot_validations: "org.springframework.boot:spring-boot-starter-validation",
              flogger_slf4j          : 'com.google.flogger:flogger-slf4j-backend:0.7.4',
              mapstruct              : "org.mapstruct:mapstruct:1.4.2.Final",
              mapstruct_processor    : "org.mapstruct:mapstruct-processor:1.4.2.Final",
              reactor_core           : 'io.projectreactor:reactor-core:3.4.18',
              spring_boot_data_jpa   : 'org.springframework.boot:spring-boot-starter-data-jpa',
              ojdbc					 : 'com.oracle.database.jdbc:ojdbc11:23.2.0.0',
              hypersistence          : 'io.hypersistence:hypersistence-utils-hibernate-60:3.1.1',
              openapi                : 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2',
              azure_core             : 'com.azure:azure-core:1.34.0',
              azure_kv               : 'com.microsoft.azure:azure-keyvault-secrets-spring-boot-starter:2.3.5',
              jackson_annotations    : 'com.fasterxml.jackson.module:jackson-module-jakarta-xmlbind-annotations:2.13.3',
              jayway                 : 'com.jayway.jsonpath:json-path:2.7.0',
              guava                  : 'com.google.guava:guava:31.1-jre',
              netflix_graphql_dgs    : "com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter",
              appinsights_core       : "com.microsoft.azure:applicationinsights-core:2.6.1",
              appinsights_web        : "com.microsoft.azure:applicationinsights-web:2.6.1"
      ],
      customLibraries = [
              webclient   : 'com.adha.dhp.common:webclient:0.0.1',
              util        : 'com.adha.dhp.common:util:0.0.1',
              logging     : 'com.adha.dhp.common:logging:0.0.2',
              events      : 'com.adha.dhp.common:events:0.0.1',
              metrics     : 'com.adha.dhp.common:metrics:0.0.1',
              azureblobstore : 'com.adha.dhp.common:blobstore:0.0.2'
      ],
      testLibraries = [
              mocksever_netty           : 'org.mock-server:mockserver-netty:5.15.0',
              mockserver_spring_listener: 'org.mock-server:mockserver-spring-test-listener:5.15.0',
              spring_boot_test          : 'org.springframework.boot:spring-boot-starter-test',
              hamcrest_core             : 'org.hamcrest:hamcrest-core:2.2',
              hamcrest_library          : 'org.hamcrest:hamcrest-library:2.2',
              mockito_core              : 'org.mockito:mockito-core:3.11.2',
              h2                        : 'com.h2database:h2:2.1.214',
              embeddedRedis             : 'it.ozimov:embedded-redis:0.7.2',
              freeport                  : 'me.alexpanov:free-port-finder:1.0',
              jupiter_api               : 'org.junit.jupiter:junit-jupiter-api:5.9.0',
              jupiter_engine            : 'org.junit.jupiter:junit-jupiter-engine:5.9.0',
              junit_jupiter             : 'org.junit.jupiter:junit-jupiter-api:5.9.0',
              junit_jupiter_engine      : 'org.junit.jupiter:junit-jupiter-engine:5.9.0',
              junit_platform            : 'org.junit.platform:junit-platform-launcher:1.9.2'
      ]
    ]
}

jib {
    to {
        tags = ['latest', project.version]
    }
    container {
        jvmFlags = ['-Xms1024m', '-Xmx2048m']
        creationTime = "USE_CURRENT_TIMESTAMP"
    }
    allowInsecureRegistries = false
}

configurations.implementation {
    exclude group: 'io.zipkin.reporter2'
}

jar { enabled = false }

bootJar {
    enabled = true
}